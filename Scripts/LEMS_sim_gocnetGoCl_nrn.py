'''
Neuron simulator export for:

Components:
    GJ_0 (Type: gapJunction:  conductance=6.65199E-10 (SI conductance))
    GJ_1 (Type: gapJunction:  conductance=3.37885E-10 (SI conductance))
    GJ_2 (Type: gapJunction:  conductance=1.33902E-10 (SI conductance))
    GJ_3 (Type: gapJunction:  conductance=3.5857890000000004E-9 (SI conductance))
    GJ_4 (Type: gapJunction:  conductance=6.345340000000001E-10 (SI conductance))
    GJ_5 (Type: gapJunction:  conductance=3.2687600000000003E-10 (SI conductance))
    gocNetwork (Type: networkWithTemperature:  temperature=296.15 (SI temperature))
    null (Type: notes)
    GolgiNa (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiNaR (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiNaP (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiKA (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiSK2 (Type: ionChannelKS:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiKM (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiKV (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiBK (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiCaHVA (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiCaLVA (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiHCN1f (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiHCN1s (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiHCN2f (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    GolgiHCN2s (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    LeakConductance (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Golgi_CALC (Type: decayingPoolConcentrationModel:  restingConc=5.0E-5 (SI concentration) decayConstant=7.69231E-4 (SI time) shellThickness=2.0378E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    GoCl (Type: cell)
    net1 (Type: networkWithTemperature:  temperature=296.15 (SI temperature))
    null (Type: notes)
    GapJuncCML (Type: gapJunction:  conductance=5.0E-10 (SI conductance))
    MF_Input (Type: spikeGenerator:  period=0.15 (SI time))
    AlphaSyn (Type: alphaCurrentSynapse:  tau=0.03 (SI time) ibase=2.0E-10 (SI current))
    sim_gocnetGoCl (Type: Simulation:  length=2.0 (SI time) step=2.5E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.4
         org.neuroml.model   v1.5.4
         jLEMS               v0.9.9.1

'''

import neuron

import time
import sys

import hashlib
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=12345):

        print("\n    Starting simulation in NEURON of %sms generated from NeuroML2 model...\n"%tstop)

        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=sim_gocnetGoCl type=Simulation) of network/component: gocNetwork (Type: networkWithTemperature:  temperature=296.15 (SI temperature))
        
        '''

        # Temperature used for network: 296.15 K
        h.celsius = 296.15 - 273.15

        # ######################   Population: GoClPop
        print("Population GoClPop contains 10 instance(s) of component: GoCl of type: cell")

        print("Setting the default initial concentrations for ca (used in GoCl) to 5.0E-5 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 5.0E-5")
        h("cao0_ca_ion = 2.0")

        h.load_file("GoCl.hoc")
        a_GoClPop = []
        h("{ n_GoClPop = 10 }")
        h("objectvar a_GoClPop[n_GoClPop]")
        for i in range(int(h.n_GoClPop)):
            h("a_GoClPop[%i] = new GoCl()"%i)
            h("access a_GoClPop[%i].Soma"%i)

            self.next_global_id+=1

        h("{ a_GoClPop[0].position(49.7045, 150.12769, 30.9051) }")
        h("{ a_GoClPop[1].position(69.30694, 348.67297, 49.861843) }")
        h("{ a_GoClPop[2].position(30.727016, 96.14264, 64.94015) }")
        h("{ a_GoClPop[3].position(299.1904, 286.89096, 7.6727) }")
        h("{ a_GoClPop[4].position(13.741691, 235.73753, 15.579345) }")
        h("{ a_GoClPop[5].position(342.7841, 41.847103, 6.43794) }")
        h("{ a_GoClPop[6].position(64.937065, 342.93213, 65.762535) }")
        h("{ a_GoClPop[7].position(312.24387, 169.92679, 67.08473) }")
        h("{ a_GoClPop[8].position(130.04079, 273.26013, 60.909798) }")
        h("{ a_GoClPop[9].position(278.58798, 321.88776, 62.757538) }")

        h("proc initialiseV_GoClPop() { for i = 0, n_GoClPop-1 { a_GoClPop[i].set_initial_v() } }")
        h("objref fih_GoClPop")
        h('{fih_GoClPop = new FInitializeHandler(0, "initialiseV_GoClPop()")}')

        h("proc initialiseIons_GoClPop() { for i = 0, n_GoClPop-1 { a_GoClPop[i].set_initial_ion_properties() } }")
        h("objref fih_ion_GoClPop")
        h('{fih_ion_GoClPop = new FInitializeHandler(1, "initialiseIons_GoClPop()")}')

        # ######################   Population: MF_Input_pop
        print("Population MF_Input_pop contains 3 instance(s) of component: MF_Input of type: spikeGenerator")

        h(" {n_MF_Input_pop = 3} ")
        '''
        Population MF_Input_pop contains instances of Component(id=MF_Input type=spikeGenerator)
        whose dynamics will be implemented as a mechanism (MF_Input) in a mod file
        '''
        h(" create MF_Input_pop[3]")
        h(" objectvar m_MF_Input_MF_Input_pop[3] ")

        for i in range(int(h.n_MF_Input_pop)):
            h.MF_Input_pop[i].L = 10.0
            h.MF_Input_pop[i](0.5).diam = 10.0
            h.MF_Input_pop[i](0.5).cm = 318.31
            h.MF_Input_pop[i].push()
            h(" MF_Input_pop[%i]  { m_MF_Input_MF_Input_pop[%i] = new MF_Input(0.5) } "%(i,i))

            h.m_MF_Input_MF_Input_pop[i].period = 150.0
            h.pop_section()

            self.next_global_id+=1

        h(" MF_Input_pop[0] { pt3dclear() } ")
        h(" MF_Input_pop[0] { pt3dadd(49.7045, 150.12769 + (5), 130.9051, 10) } ")
        h(" MF_Input_pop[0] { pt3dadd(49.7045, 150.12769 + (-5), 130.9051, 10) } ")
        h(" MF_Input_pop[1] { pt3dclear() } ")
        h(" MF_Input_pop[1] { pt3dadd(69.30694, 348.67297 + (5), 149.86185, 10) } ")
        h(" MF_Input_pop[1] { pt3dadd(69.30694, 348.67297 + (-5), 149.86185, 10) } ")
        h(" MF_Input_pop[2] { pt3dclear() } ")
        h(" MF_Input_pop[2] { pt3dadd(30.727016, 96.14264 + (5), 164.94014, 10) } ")
        h(" MF_Input_pop[2] { pt3dadd(30.727016, 96.14264 + (-5), 164.94014, 10) } ")

        # ######################   Projection: MFtoGoC
        print("Adding projection: MFtoGoC, from MF_Input_pop to GoClPop with synapse AlphaSyn, 3 connection(s)")

        # Connection 0: cell 0, seg 0 (0.5) [0.5 on MF_Input_pop[0]] -> cell 0, seg 0 (0.5) [0.5 on a_GoClPop[0].Soma], weight: 1.0, delay 0.0
        h("objectvar syn_GoClPop_0_0_AlphaSyn_0")
        h("a_GoClPop[0].Soma syn_GoClPop_0_0_AlphaSyn_0 = new AlphaSyn(0.5)")
        h("objectvar nc_syn_GoClPop_0_0_AlphaSyn_0_0")
        h("MF_Input_pop[0] nc_syn_GoClPop_0_0_AlphaSyn_0_0 = new NetCon(m_MF_Input_MF_Input_pop[0], syn_GoClPop_0_0_AlphaSyn_0, 0.0, 0.0, 1.0)")  

        # Connection 1: cell 1, seg 0 (0.5) [0.5 on MF_Input_pop[1]] -> cell 1, seg 0 (0.5) [0.5 on a_GoClPop[1].Soma], weight: 1.0, delay 0.0
        h("objectvar syn_GoClPop_1_0_AlphaSyn_0")
        h("a_GoClPop[1].Soma syn_GoClPop_1_0_AlphaSyn_0 = new AlphaSyn(0.5)")
        h("objectvar nc_syn_GoClPop_1_0_AlphaSyn_0_1")
        h("MF_Input_pop[1] nc_syn_GoClPop_1_0_AlphaSyn_0_1 = new NetCon(m_MF_Input_MF_Input_pop[1], syn_GoClPop_1_0_AlphaSyn_0, 0.0, 0.0, 1.0)")  

        # Connection 2: cell 2, seg 0 (0.5) [0.5 on MF_Input_pop[2]] -> cell 2, seg 0 (0.5) [0.5 on a_GoClPop[2].Soma], weight: 1.0, delay 0.0
        h("objectvar syn_GoClPop_2_0_AlphaSyn_0")
        h("a_GoClPop[2].Soma syn_GoClPop_2_0_AlphaSyn_0 = new AlphaSyn(0.5)")
        h("objectvar nc_syn_GoClPop_2_0_AlphaSyn_0_2")
        h("MF_Input_pop[2] nc_syn_GoClPop_2_0_AlphaSyn_0_2 = new NetCon(m_MF_Input_MF_Input_pop[2], syn_GoClPop_2_0_AlphaSyn_0, 0.0, 0.0, 1.0)")  

        # ######################   Electrical Projection: gocGJ
        print("Adding electrical projection: gocGJ from GoClPop to GoClPop, with 6 connection(s)")

        h("objectvar syn_gocGJ_GJ_0_A[6]")
        h("objectvar syn_gocGJ_GJ_0_B[6]")

        # Elect Connection 0: cell 0, seg 1 (0.5) [0.5 on a_GoClPop[0].Section_1] -> cell 2, seg 1 (0.5) [0.5 on a_GoClPop[2].Section_1], weight: 1.0
        h("a_GoClPop[0].Section_1 { syn_gocGJ_GJ_0_A[0] = new GJ_0(0.5) }")
        h("a_GoClPop[2].Section_1 { syn_gocGJ_GJ_0_B[0] = new GJ_0(0.5) }")
        h("setpointer syn_gocGJ_GJ_0_A[0].vpeer, a_GoClPop[2].Section_1.v(0.5)")
        h("setpointer syn_gocGJ_GJ_0_B[0].vpeer, a_GoClPop[0].Section_1.v(0.5)")

        # Elect Connection 1: cell 0, seg 1 (0.5) [0.5 on a_GoClPop[0].Section_1] -> cell 4, seg 1 (0.5) [0.5 on a_GoClPop[4].Section_1], weight: 1.0
        h("a_GoClPop[0].Section_1 { syn_gocGJ_GJ_0_A[1] = new GJ_0(0.5) }")
        h("a_GoClPop[4].Section_1 { syn_gocGJ_GJ_0_B[1] = new GJ_0(0.5) }")
        h("setpointer syn_gocGJ_GJ_0_A[1].vpeer, a_GoClPop[4].Section_1.v(0.5)")
        h("setpointer syn_gocGJ_GJ_0_B[1].vpeer, a_GoClPop[0].Section_1.v(0.5)")

        # Elect Connection 2: cell 1, seg 1 (0.5) [0.5 on a_GoClPop[1].Section_1] -> cell 4, seg 1 (0.5) [0.5 on a_GoClPop[4].Section_1], weight: 1.0
        h("a_GoClPop[1].Section_1 { syn_gocGJ_GJ_0_A[2] = new GJ_0(0.5) }")
        h("a_GoClPop[4].Section_1 { syn_gocGJ_GJ_0_B[2] = new GJ_0(0.5) }")
        h("setpointer syn_gocGJ_GJ_0_A[2].vpeer, a_GoClPop[4].Section_1.v(0.5)")
        h("setpointer syn_gocGJ_GJ_0_B[2].vpeer, a_GoClPop[1].Section_1.v(0.5)")

        # Elect Connection 3: cell 1, seg 1 (0.5) [0.5 on a_GoClPop[1].Section_1] -> cell 6, seg 1 (0.5) [0.5 on a_GoClPop[6].Section_1], weight: 1.0
        h("a_GoClPop[1].Section_1 { syn_gocGJ_GJ_0_A[3] = new GJ_0(0.5) }")
        h("a_GoClPop[6].Section_1 { syn_gocGJ_GJ_0_B[3] = new GJ_0(0.5) }")
        h("setpointer syn_gocGJ_GJ_0_A[3].vpeer, a_GoClPop[6].Section_1.v(0.5)")
        h("setpointer syn_gocGJ_GJ_0_B[3].vpeer, a_GoClPop[1].Section_1.v(0.5)")

        # Elect Connection 4: cell 3, seg 1 (0.5) [0.5 on a_GoClPop[3].Section_1] -> cell 9, seg 1 (0.5) [0.5 on a_GoClPop[9].Section_1], weight: 1.0
        h("a_GoClPop[3].Section_1 { syn_gocGJ_GJ_0_A[4] = new GJ_0(0.5) }")
        h("a_GoClPop[9].Section_1 { syn_gocGJ_GJ_0_B[4] = new GJ_0(0.5) }")
        h("setpointer syn_gocGJ_GJ_0_A[4].vpeer, a_GoClPop[9].Section_1.v(0.5)")
        h("setpointer syn_gocGJ_GJ_0_B[4].vpeer, a_GoClPop[3].Section_1.v(0.5)")

        # Elect Connection 5: cell 6, seg 1 (0.5) [0.5 on a_GoClPop[6].Section_1] -> cell 8, seg 1 (0.5) [0.5 on a_GoClPop[8].Section_1], weight: 1.0
        h("a_GoClPop[6].Section_1 { syn_gocGJ_GJ_0_A[5] = new GJ_0(0.5) }")
        h("a_GoClPop[8].Section_1 { syn_gocGJ_GJ_0_B[5] = new GJ_0(0.5) }")
        h("setpointer syn_gocGJ_GJ_0_A[5].vpeer, a_GoClPop[8].Section_1.v(0.5)")
        h("setpointer syn_gocGJ_GJ_0_B[5].vpeer, a_GoClPop[6].Section_1.v(0.5)")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # ######################   File to save: sim_gocnetGoCl.v.dat (Volts_file)
        # Column: GoClPop/0/GoCl/v
        h(' objectvar v_0_Volts_file ')
        h(' { v_0_Volts_file = new Vector() } ')
        h(' { v_0_Volts_file.record(&a_GoClPop[0].Soma.v(0.5)) } ')
        h.v_0_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/1/GoCl/v
        h(' objectvar v_1_Volts_file ')
        h(' { v_1_Volts_file = new Vector() } ')
        h(' { v_1_Volts_file.record(&a_GoClPop[1].Soma.v(0.5)) } ')
        h.v_1_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/2/GoCl/v
        h(' objectvar v_2_Volts_file ')
        h(' { v_2_Volts_file = new Vector() } ')
        h(' { v_2_Volts_file.record(&a_GoClPop[2].Soma.v(0.5)) } ')
        h.v_2_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/3/GoCl/v
        h(' objectvar v_3_Volts_file ')
        h(' { v_3_Volts_file = new Vector() } ')
        h(' { v_3_Volts_file.record(&a_GoClPop[3].Soma.v(0.5)) } ')
        h.v_3_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/4/GoCl/v
        h(' objectvar v_4_Volts_file ')
        h(' { v_4_Volts_file = new Vector() } ')
        h(' { v_4_Volts_file.record(&a_GoClPop[4].Soma.v(0.5)) } ')
        h.v_4_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/5/GoCl/v
        h(' objectvar v_5_Volts_file ')
        h(' { v_5_Volts_file = new Vector() } ')
        h(' { v_5_Volts_file.record(&a_GoClPop[5].Soma.v(0.5)) } ')
        h.v_5_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/6/GoCl/v
        h(' objectvar v_6_Volts_file ')
        h(' { v_6_Volts_file = new Vector() } ')
        h(' { v_6_Volts_file.record(&a_GoClPop[6].Soma.v(0.5)) } ')
        h.v_6_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/7/GoCl/v
        h(' objectvar v_7_Volts_file ')
        h(' { v_7_Volts_file = new Vector() } ')
        h(' { v_7_Volts_file.record(&a_GoClPop[7].Soma.v(0.5)) } ')
        h.v_7_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/8/GoCl/v
        h(' objectvar v_8_Volts_file ')
        h(' { v_8_Volts_file = new Vector() } ')
        h(' { v_8_Volts_file.record(&a_GoClPop[8].Soma.v(0.5)) } ')
        h.v_8_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: GoClPop/9/GoCl/v
        h(' objectvar v_9_Volts_file ')
        h(' { v_9_Volts_file = new Vector() } ')
        h(' { v_9_Volts_file.record(&a_GoClPop[9].Soma.v(0.5)) } ')
        h.v_9_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)

        # ######################   File to save: sim_gocnetGoCl.v.spikes (Events_file)
        h(' objectvar spiketimes_Events_file, t_spiketimes_Events_file ')
        h(' { spiketimes_Events_file = new Vector() } ')
        h(' { t_spiketimes_Events_file = new Vector() } ')
        h(' objref netConnSpike_Events_file, nil ')
        # Column: GoClPop/0/GoCl (0) a_GoClPop[0].Soma
        h(' a_GoClPop[0].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 0) } ')
        # Column: GoClPop/1/GoCl (1) a_GoClPop[1].Soma
        h(' a_GoClPop[1].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 1) } ')
        # Column: GoClPop/2/GoCl (2) a_GoClPop[2].Soma
        h(' a_GoClPop[2].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 2) } ')
        # Column: GoClPop/3/GoCl (3) a_GoClPop[3].Soma
        h(' a_GoClPop[3].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 3) } ')
        # Column: GoClPop/4/GoCl (4) a_GoClPop[4].Soma
        h(' a_GoClPop[4].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 4) } ')
        # Column: GoClPop/5/GoCl (5) a_GoClPop[5].Soma
        h(' a_GoClPop[5].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 5) } ')
        # Column: GoClPop/6/GoCl (6) a_GoClPop[6].Soma
        h(' a_GoClPop[6].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 6) } ')
        # Column: GoClPop/7/GoCl (7) a_GoClPop[7].Soma
        h(' a_GoClPop[7].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 7) } ')
        # Column: GoClPop/8/GoCl (8) a_GoClPop[8].Soma
        h(' a_GoClPop[8].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 8) } ')
        # Column: GoClPop/9/GoCl (9) a_GoClPop[9].Soma
        h(' a_GoClPop[9].Soma { netConnSpike_Events_file = new NetCon(&v(0.5), nil, 0.0, 0, 1) } ')
        h(' { netConnSpike_Events_file.record(t_spiketimes_Events_file, spiketimes_Events_file, 9) } ')

        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        h.run()

        self.sim_end = time.time()
        self.sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(self.sim_time, self.sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        #print("INIT STIM  %s; %s; %s; %s"%(rand, stimType, gid, seed))
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()


        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        # ######################   File to save: sim_gocnetGoCl.v.dat (Volts_file)
        py_v_0_Volts_file = [ float(x  / 1000.0) for x in h.v_0_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_1_Volts_file = [ float(x  / 1000.0) for x in h.v_1_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_2_Volts_file = [ float(x  / 1000.0) for x in h.v_2_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_3_Volts_file = [ float(x  / 1000.0) for x in h.v_3_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_4_Volts_file = [ float(x  / 1000.0) for x in h.v_4_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_5_Volts_file = [ float(x  / 1000.0) for x in h.v_5_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_6_Volts_file = [ float(x  / 1000.0) for x in h.v_6_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_7_Volts_file = [ float(x  / 1000.0) for x in h.v_7_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_8_Volts_file = [ float(x  / 1000.0) for x in h.v_8_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_9_Volts_file = [ float(x  / 1000.0) for x in h.v_9_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_Volts_file_f2 = open('sim_gocnetGoCl.v.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_Volts_file_f2.write('%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t\n' % (py_v_time[i], py_v_0_Volts_file[i], py_v_1_Volts_file[i], py_v_2_Volts_file[i], py_v_3_Volts_file[i], py_v_4_Volts_file[i], py_v_5_Volts_file[i], py_v_6_Volts_file[i], py_v_7_Volts_file[i], py_v_8_Volts_file[i], py_v_9_Volts_file[i], ))
        f_Volts_file_f2.close()
        print("Saved data to: sim_gocnetGoCl.v.dat")

        # ######################   File to save: sim_gocnetGoCl.v.spikes (Events_file)

        f_Events_file_f2 = open('sim_gocnetGoCl.v.spikes', 'w')
        h(' objref netConnSpike_Events_file ')
        spike_ids = h.spiketimes_Events_file.to_python()  
        spike_times = h.t_spiketimes_Events_file.to_python()
        for i, id in enumerate(spike_ids):
            # Saving in format: ID_TIME
            f_Events_file_f2.write("%i\t%s\n"%(id,spike_times[i]/1000.0))
        f_Events_file_f2.close()
        print("Saved data to: sim_gocnetGoCl.v.spikes")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

        quit()


if __name__ == '__main__':

    ns = NeuronSimulation(tstop=2000, dt=0.025, seed=12345)

    ns.run()

