TITLE Mod file for component: Component(id=GolgiHCN1s type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.4
         org.neuroml.model   v1.5.4
         jLEMS               v0.9.9.1

ENDCOMMENT

NEURON {
    SUFFIX GolgiHCN1s
    USEION h WRITE ih VALENCE 1 ? Assuming valence = 1; TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE s_instances                       : parameter
    
    RANGE s_tau                             : exposure
    
    RANGE s_inf                             : exposure
    
    RANGE s_rateScale                       : exposure
    
    RANGE s_fcond                           : exposure
    RANGE s_timeCourse_TIME_SCALE           : parameter
    RANGE s_timeCourse_VOLT_SCALE           : parameter
    
    RANGE s_timeCourse_t                    : exposure
    RANGE s_steadyState_VOLT_SCALE          : parameter
    
    RANGE s_steadyState_x                   : exposure
    RANGE s_q10Settings_q10Factor           : parameter
    RANGE s_q10Settings_experimentalTemp    : parameter
    RANGE s_q10Settings_TENDEGREES          : parameter
    
    RANGE s_q10Settings_q10                 : exposure
    RANGE s_timeCourse_V                    : derived variable
    RANGE s_timeCourse_t2                   : derived variable
    RANGE s_steadyState_V                   : derived variable
    RANGE s_tauUnscaled                     : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-5 (uS)
    s_instances = 1 
    s_timeCourse_TIME_SCALE = 1 (ms)
    s_timeCourse_VOLT_SCALE = 1 (mV)
    s_steadyState_VOLT_SCALE = 1 (mV)
    s_q10Settings_q10Factor = 3 
    s_q10Settings_experimentalTemp = 306.15 (K)
    s_q10Settings_TENDEGREES = 10 (K)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    eh (mV)
    ih (mA/cm2)
    
    
    s_timeCourse_V                         : derived variable
    
    s_timeCourse_t2                        : derived variable
    
    s_timeCourse_t (ms)                    : conditional derived var...
    
    s_steadyState_V                        : derived variable
    
    s_steadyState_x                        : derived variable
    
    s_q10Settings_q10                      : derived variable
    
    s_rateScale                            : derived variable
    
    s_fcond                                : derived variable
    
    s_inf                                  : derived variable
    
    s_tauUnscaled (ms)                     : derived variable
    
    s_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_s_q (/ms)
    
}

STATE {
    s_q  
    
}

INITIAL {
    eh = -20.0
    
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    s_q = s_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=GolgiHCN1s type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=GolgiHCN1s type=ionChannelHH), from gates; Component(id=s type=gateHHtauInf)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=s type=gateHHtauInf)]))
    fopen0 = s_fcond ? path based, prefix = 
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ih = gion * (v - eh)
    
}

DERIVATIVE states {
    rates()
    s_q' = rate_s_q 
    
}

PROCEDURE rates() {
    
    s_timeCourse_V = v /  s_timeCourse_VOLT_SCALE ? evaluable
    s_timeCourse_t2 = (exp ((0.01451 *  s_timeCourse_V ) + 4.056 )* 2.302585092 ) ? evaluable
    if (s_timeCourse_t2  > ( 200 ))  { 
        s_timeCourse_t = 200 *  s_timeCourse_TIME_SCALE ? evaluable cdv
    } else if (s_timeCourse_t2   < ( 0.1 ))  { 
        s_timeCourse_t = 0.1 *  s_timeCourse_TIME_SCALE ? evaluable cdv
    } else  { 
        s_timeCourse_t = s_timeCourse_t2  *  s_timeCourse_TIME_SCALE ? evaluable cdv
    }
    
    s_steadyState_V = v /  s_steadyState_VOLT_SCALE ? evaluable
    s_steadyState_x = (1 - (0.002096 * s_steadyState_V  + 0.9759)) * 1/(1 + exp(( s_steadyState_V  + 72.49)*0.11305 )) ? evaluable
    s_q10Settings_q10 = s_q10Settings_q10Factor ^((temperature -  s_q10Settings_experimentalTemp )/ s_q10Settings_TENDEGREES ) ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=s type=gateHHtauInf), from q10Settings; Component(id=null type=q10ExpTemp)
    ? multiply applied to all instances of q10 in: <q10Settings> ([Component(id=null type=q10ExpTemp)]))
    s_rateScale = s_q10Settings_q10 ? path based, prefix = s_
    
    s_fcond = s_q ^ s_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=s type=gateHHtauInf), from steadyState; Component(id=null type=Golgi_HCN1s_oinf)
    s_inf = s_steadyState_x ? path based, prefix = s_
    
    ? DerivedVariable is based on path: timeCourse/t, on: Component(id=s type=gateHHtauInf), from timeCourse; Component(id=null type=Golgi_HCN1s_tau)
    s_tauUnscaled = s_timeCourse_t ? path based, prefix = s_
    
    s_tau = s_tauUnscaled  /  s_rateScale ? evaluable
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    rate_s_q = ( s_inf  -  s_q ) /  s_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
     
    
}

